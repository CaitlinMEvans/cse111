CSE 111 Proposal for a Student Chosen Program

    (This is a proposal. All proposals are written with our best
    knowledge at the beginning of a project. As we progress from the
    beginning to the end of a project, we gain more knowledge, and we
    change some of our proposed ideas. This is part of completing any
    project and is fine.  However, we still must write a proposal so
    that our teachers or supervisors know what we intend to do. Please
    answer each of the following questions to the best of your
    knowledge.)

1. What is the title of your program? 
Evans Archery Practice Tracker

2. What real-world problem will your program address or help to solve?
As a member of the Timpanogos Archery Club and someone invested in improving my accuracy and consistency in archery, I want a tool to track practice sessions, analyze performance, and identify areas needing improvement. Archers often struggle to log and analyze their progress effectively. This program will simplify tracking accuracy and consistency, provide visualizations of progress, and suggest areas for improvement based on performance trends.


3. What will you learn from developing this program?
I will learn how to process and analyze data using Python libraries, create visualizations to represent trends, and write reusable functions for logging and analyzing practice sessions. Additionally, Iâ€™ll gain experience with testing functions using pytest to ensure reliability. This project will also help me understand how to design user-friendly and practical tools for personal use.

4. What Python modules will your program use?

    (Some examples are: csv, datetime, functools, matplotlib, math,
    pandas, pytest, random, requests, and tkinter.)

- csv: For logging practice session data.
- pandas: For efficient data filtering and processing.
- matplotlib: For creating visualizations of accuracy trends and comparisons.
- requests: For retrieving weather data for practice sessions.
- pytest: For writing and running test functions to validate core functionality.

5. List the names of functions you will need?

    (Remember that the most reusable functions don't get user input and
    don't print results but instead have parameters and return a result.
    Functions that get user input and print results are important and do
    useful work but are not easily reusable.)

    (Remember also that it's hard to test functions that get user input
    and print results. It's easy to test functions that don't get user
    input and don't print results but instead have parameters and return
    a result. Therefore, you should write most of your program functions
    to have parameters and return a result.)

log_practice_session(date, distance, arrows, hits): Logs the details of a practice session and calculates accuracy.
calculate_statistics(data): Aggregates statistics such as total arrows shot, overall accuracy, and most practiced distance.
generate_progress_report(data, output_file): Creates a text-based progress report summarizing practice statistics.
get_weather(api_key, location): Fetches weather data for a practice session using an API.
recommend_distances(data, threshold): Analyzes performance data and suggests distances to focus on for improvement.
plot_accuracy_trends(data): Generates visualizations to show accuracy trends over time.

6. List the names of the test functions you will write.
test_log_practice_session(): Tests the accuracy calculation and proper logging of practice session data.
test_calculate_statistics(): Ensures statistics are correctly aggregated from the practice session data.
test_recommend_distances(): Verifies that the function correctly identifies distances needing improvement.
